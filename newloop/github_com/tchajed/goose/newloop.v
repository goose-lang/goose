(* autogenerated from github.com/tchajed/goose/newloop *)
From Perennial.goose_lang Require Import prelude.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

Definition basicLoop: val :=
  rec: "basicLoop" "body" :=
    (if: (~ ("body" #()))
    then #()
    else
      "basicLoop" "body";;
      #()).

Definition fancyLoop: val :=
  rec: "fancyLoop" "cond" "body" "post" :=
    (if: (~ ("cond" #()))
    then #()
    else
      (if: (~ ("body" #()))
      then #()
      else
        "post" #();;
        "fancyLoop" "cond" "body" "post";;
        #())).

Definition sumBasic: val :=
  rec: "sumBasic" "n" :=
    let: "sum" := ref (zero_val uint64T) in
    let: "i" := ref (zero_val uint64T) in
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      "sum" <-[uint64T] ((![uint64T] "sum") + (![uint64T] "i"));;
      (if: (![uint64T] "i") = "n"
      then Break
      else
        "i" <-[uint64T] ((![uint64T] "i") + #1);;
        Continue));;
    ![uint64T] "sum".

Definition sumBasicNew: val :=
  rec: "sumBasicNew" "n" :=
    let: "sum" := ref (zero_val uint64T) in
    let: "i" := ref (zero_val uint64T) in
    let: "body" := (λ: <>,
      "sum" <-[uint64T] ((![uint64T] "sum") + (![uint64T] "i"));;
      (if: (![uint64T] "i") = "n"
      then #false
      else
        "i" <-[uint64T] ((![uint64T] "i") + #1);;
        #true)
      ) in
    basicLoop "body";;
    ![uint64T] "sum".

Definition sumFancy: val :=
  rec: "sumFancy" "n" :=
    let: "sum" := ref (zero_val uint64T) in
    let: "i" := ref (zero_val uint64T) in
    Skip;;
    (for: (λ: <>, (![uint64T] "i") ≤ "n"); (λ: <>, "i" <-[uint64T] ((![uint64T] "i") + #1)) := λ: <>,
      "sum" <-[uint64T] ((![uint64T] "sum") + (![uint64T] "i"));;
      Continue);;
    ![uint64T] "sum".

Definition sumFancyNew: val :=
  rec: "sumFancyNew" "n" :=
    let: "sum" := ref (zero_val uint64T) in
    let: "i" := ref (zero_val uint64T) in
    let: "cond" := (λ: <>,
      (![uint64T] "i") ≤ "n"
      ) in
    let: "body" := (λ: <>,
      "sum" <-[uint64T] ((![uint64T] "sum") + (![uint64T] "i"));;
      #true
      ) in
    let: "post" := (λ: <>,
      "i" <-[uint64T] ((![uint64T] "i") + #1);;
      #()
      ) in
    fancyLoop "cond" "body" "post";;
    ![uint64T] "sum".

End code.

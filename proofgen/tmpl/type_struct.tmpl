{{ $T := . -}}
{{ $name := $T.Name -}}
Module {{$name}}.
Section def.
Context `{ffi_syntax}.
Record t := mk {
{{ range .Fields }}  {{.CoqName}} : {{.Type}};
{{ end -}}
}.
End def.
End {{$name}}.

Section instances.
Context `{ffi_syntax}.
{{ if .Fields }}
Global Instance settable_{{$name}} `{ffi_syntax}: Settable _ :=
  settable! {{$name}}.mk < {{- " " -}}
{{ range $i, $f := .Fields -}}
{{$name}}.{{ $f.CoqName }}
{{- if isSep $i (len $T.Fields) }}; {{ end -}}
{{ end }} >.
{{ end -}}
Global Instance into_val_{{$name}} `{ffi_syntax} : IntoVal {{$name}}.t.
Admitted.

Global Instance into_val_typed_{{$name}} `{ffi_syntax} : IntoValTyped {{$name}}.t {{.PkgName}}.{{$name}} :=
{|
  default_val := {{$name}}.mk
  {{- range .Fields }} (default_val _) {{- end }};
  to_val_has_go_type := ltac:(destruct falso);
  default_val_eq_zero_val := ltac:(destruct falso);
  to_val_inj := ltac:(destruct falso);
  to_val_eqdec := ltac:(solve_decision);
|}.
{{ range $f := .Fields -}}
Global Instance into_val_struct_field_{{$name}}_{{$f.Name}} `{ffi_syntax} : {{/* type on next line */ -}}
  IntoValStructField "{{$f.Name}}" {{/* params on next line */ -}}
  {{$T.PkgName}}.{{$name}} {{$name}}.{{$f.CoqName}}.
Admitted.

{{ end }}
Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_{{$name}} `{ffi_semantics} `{!ffi_interp ffi} `{!heapGS Σ}
{{- range $T.Fields }} {{.CoqName}}{{ end -}} :
  PureWp True
    (struct.make #{{$T.PkgName}}.{{$name}} (alist_val [
{{- range $i, $f := .Fields -}}
{{ if $i }};{{ end }}
      "{{$f.Name}}" ::= #{{$f.CoqName}}
{{- end }}
    ]))%struct
    #({{$name}}.mk {{- range $T.Fields }} {{.CoqName}}{{ end -}}
).
Admitted.

{{ if $T.Fields }}
Global Instance {{$name}}_struct_fields_split dq l (v : {{$name}}.t) :
  StructFieldsSplit dq l v ( {{- /* continued */ -}}
  {{- range $i, $f := .Fields -}}
{{ if $i }} ∗{{ end }}
    "H{{$f.Name}}" ∷ l ↦s[{{$T.PkgName}}.{{$name}} :: "{{$f.Name}}"]{dq} v.({{$name}}.{{$f.CoqName}})
  {{- end }}
  ).
Admitted.

{{ end -}}

End instances.

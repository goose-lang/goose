(* autogenerated from github.com/tchajed/goose/internal/examples/async *)
From Perennial.new_goose_lang Require Import prelude.
From Goose Require github_com.tchajed.goose.machine.async_disk.

From Perennial.goose_lang Require Import ffi.async_disk_prelude.

(* async just uses the async disk FFI *)

Definition TakesDisk: val :=
  rec: "TakesDisk" "d" :=
    exception_do (let: "d" := ref_to disk.Disk "d" in
    do:  #()).

Definition UseDisk: val :=
  rec: "UseDisk" "d" :=
    exception_do (let: "d" := ref_to disk.Disk "d" in
    let: "v" := ref_zero (sliceT byteT) #() in
    let: "$a0" := NewSlice byteT #4096 in
    do:  "v" <-[sliceT byteT] "$a0";;;
    do:  (struct.get disk.Disk "Write") (![disk.Disk] "d") #0 (![sliceT byteT] "v");;;
    do:  (struct.get disk.Disk "Barrier") (![disk.Disk] "d");;;
    do:  #()).

(* autogenerated from github.com/tchajed/goose/internal/examples/unittest/generic *)
From Perennial.new_goose_lang Require Import prelude.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

Definition SliceMap (T:ty) (U:ty): val :=
  rec: "SliceMap" "f" "s" :=
    exception_do (let: "s" := ref_to (sliceT T) "s" in
    let: "f" := ref_to (T -> U)%!h(MISSING)t "f" in
    let: "newSlice" := ref (zero_val (sliceT U)) in
    do:  ForSlice T <> "x" (![sliceT T] "s")
      (let: "$a0" := SliceAppend U (![sliceT U] "newSlice") ((![(arrowT unitT unitT)] "f") (![T] "x")) in
      do:  "newSlice" <-[sliceT U] "$a0";;;
      do:  #());;;
    return: (![sliceT U] "newSlice");;;
    do:  #()).

Definition Id (T:ty): val :=
  rec: "Id" "x" :=
    exception_do (let: "x" := ref_to T "x" in
    return: (![T] "x");;;
    do:  #()).

Definition MapLen (V:ty): val :=
  rec: "MapLen" "m" :=
    exception_do (let: "m" := ref_to (mapT V) "m" in
    return: (MapLen (![mapT V] "m"));;;
    do:  #()).

End code.

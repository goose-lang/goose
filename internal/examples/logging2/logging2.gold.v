(* autogenerated from logging2 *)
From Perennial.goose_lang Require Import prelude.
From Perennial.goose_lang Require Import ffi.disk_prelude.

(* logging2.go *)

Definition LOGCOMMIT : expr := #0.
Theorem LOGCOMMIT_t Γ : Γ ⊢ LOGCOMMIT : uint64T.
Proof. typecheck. Qed.

Definition LOGSTART : expr := #1.
Theorem LOGSTART_t Γ : Γ ⊢ LOGSTART : uint64T.
Proof. typecheck. Qed.

Definition LOGMAXBLK : expr := #510.
Theorem LOGMAXBLK_t Γ : Γ ⊢ LOGMAXBLK : uint64T.
Proof. typecheck. Qed.

Definition LOGEND : expr := LOGMAXBLK + LOGSTART.
Theorem LOGEND_t Γ : Γ ⊢ LOGEND : uint64T.
Proof. typecheck. Qed.

Definition Log := struct.decl [
  "logLock" :: lockRefT;
  "memLock" :: lockRefT;
  "logSz" :: uint64T;
  "memLog" :: refT (slice.T disk.blockT);
  "memLen" :: refT uint64T;
  "memTxnNxt" :: refT uint64T;
  "logTxnNxt" :: refT uint64T
].

Definition Log__writeHdr: val :=
  rec: "Log__writeHdr" "log" "len" :=
    let: "hdr" := NewSlice byteT #4096 in
    UInt64Put "hdr" "len";;
    disk.Write LOGCOMMIT "hdr".
Theorem Log__writeHdr_t: ⊢ Log__writeHdr : (struct.t Log -> uint64T -> unitT).
Proof. typecheck. Qed.
Hint Resolve Log__writeHdr_t : types.

Definition Init: val :=
  rec: "Init" "logSz" :=
    let: "log" := struct.mk Log [
      "logLock" ::= lock.new #();
      "memLock" ::= lock.new #();
      "logSz" ::= "logSz";
      "memLog" ::= ref (zero_val (slice.T disk.blockT));
      "memLen" ::= ref (zero_val uint64T);
      "memTxnNxt" ::= ref (zero_val uint64T);
      "logTxnNxt" ::= ref (zero_val uint64T)
    ] in
    Log__writeHdr "log" #0;;
    "log".
Theorem Init_t: ⊢ Init : (uint64T -> struct.t Log).
Proof. typecheck. Qed.
Hint Resolve Init_t : types.

Definition Log__readHdr: val :=
  rec: "Log__readHdr" "log" :=
    let: "hdr" := disk.Read LOGCOMMIT in
    let: "disklen" := UInt64Get "hdr" in
    "disklen".
Theorem Log__readHdr_t: ⊢ Log__readHdr : (struct.t Log -> uint64T).
Proof. typecheck. Qed.
Hint Resolve Log__readHdr_t : types.

Definition Log__readBlocks: val :=
  rec: "Log__readBlocks" "log" "len" :=
    let: "blks" := ref_to (slice.T (slice.T byteT)) (NewSlice disk.blockT #0) in
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, ![uint64T] "i" < "len"); (λ: <>, "i" <-[uint64T] ![uint64T] "i" + #1) := λ: <>,
      let: "blk" := disk.Read (LOGSTART + ![uint64T] "i") in
      "blks" <-[slice.T (slice.T byteT)] SliceAppend (slice.T byteT) (![slice.T (slice.T byteT)] "blks") "blk";;
      Continue);;
    ![slice.T (slice.T byteT)] "blks".
Theorem Log__readBlocks_t: ⊢ Log__readBlocks : (struct.t Log -> uint64T -> slice.T disk.blockT).
Proof. typecheck. Qed.
Hint Resolve Log__readBlocks_t : types.

Definition Log__Read: val :=
  rec: "Log__Read" "log" :=
    lock.acquire (struct.get Log "logLock" "log");;
    let: "disklen" := Log__readHdr "log" in
    let: "blks" := Log__readBlocks "log" "disklen" in
    lock.release (struct.get Log "logLock" "log");;
    "blks".
Theorem Log__Read_t: ⊢ Log__Read : (struct.t Log -> slice.T disk.blockT).
Proof. typecheck. Qed.
Hint Resolve Log__Read_t : types.

Definition Log__memWrite: val :=
  rec: "Log__memWrite" "log" "l" :=
    let: "n" := slice.len "l" in
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, ![uint64T] "i" < "n"); (λ: <>, "i" <-[uint64T] ![uint64T] "i" + #1) := λ: <>,
      struct.get Log "memLog" "log" <-[slice.T (slice.T byteT)] SliceAppend (slice.T byteT) (![slice.T (slice.T byteT)] (struct.get Log "memLog" "log")) (SliceGet (slice.T byteT) "l" (![uint64T] "i"));;
      Continue).
Theorem Log__memWrite_t: ⊢ Log__memWrite : (struct.t Log -> slice.T disk.blockT -> unitT).
Proof. typecheck. Qed.
Hint Resolve Log__memWrite_t : types.

Definition Log__memAppend: val :=
  rec: "Log__memAppend" "log" "l" :=
    lock.acquire (struct.get Log "memLock" "log");;
    (if: ![uint64T] (struct.get Log "memLen" "log") + slice.len "l" ≥ struct.get Log "logSz" "log"
    then
      lock.release (struct.get Log "memLock" "log");;
      (#false, #0)
    else
      let: "txn" := ![uint64T] (struct.get Log "memTxnNxt" "log") in
      let: "n" := ![uint64T] (struct.get Log "memLen" "log") + slice.len "l" in
      struct.get Log "memLen" "log" <-[uint64T] "n";;
      struct.get Log "memTxnNxt" "log" <-[uint64T] ![uint64T] (struct.get Log "memTxnNxt" "log") + #1;;
      lock.release (struct.get Log "memLock" "log");;
      (#true, "txn")).
Theorem Log__memAppend_t: ⊢ Log__memAppend : (struct.t Log -> slice.T disk.blockT -> (boolT * uint64T)).
Proof. typecheck. Qed.
Hint Resolve Log__memAppend_t : types.

(* XXX just an atomic read? *)
Definition Log__readLogTxnNxt: val :=
  rec: "Log__readLogTxnNxt" "log" :=
    lock.acquire (struct.get Log "memLock" "log");;
    let: "n" := ![uint64T] (struct.get Log "logTxnNxt" "log") in
    lock.release (struct.get Log "memLock" "log");;
    "n".
Theorem Log__readLogTxnNxt_t: ⊢ Log__readLogTxnNxt : (struct.t Log -> uint64T).
Proof. typecheck. Qed.
Hint Resolve Log__readLogTxnNxt_t : types.

Definition Log__diskAppendWait: val :=
  rec: "Log__diskAppendWait" "log" "txn" :=
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      let: "logtxn" := Log__readLogTxnNxt "log" in
      (if: "txn" < "logtxn"
      then Break
      else Continue)).
Theorem Log__diskAppendWait_t: ⊢ Log__diskAppendWait : (struct.t Log -> uint64T -> unitT).
Proof. typecheck. Qed.
Hint Resolve Log__diskAppendWait_t : types.

Definition Log__Append: val :=
  rec: "Log__Append" "log" "l" :=
    let: ("ok", "txn") := Log__memAppend "log" "l" in
    (if: "ok"
    then
      Log__diskAppendWait "log" "txn";;
      #()
    else #());;
    "ok".
Theorem Log__Append_t: ⊢ Log__Append : (struct.t Log -> slice.T disk.blockT -> boolT).
Proof. typecheck. Qed.
Hint Resolve Log__Append_t : types.

Definition Log__writeBlocks: val :=
  rec: "Log__writeBlocks" "log" "l" "pos" :=
    let: "n" := slice.len "l" in
    let: "i" := ref_to uint64T #0 in
    (for: (λ: <>, ![uint64T] "i" < "n"); (λ: <>, "i" <-[uint64T] ![uint64T] "i" + #1) := λ: <>,
      let: "bk" := SliceGet (slice.T byteT) "l" (![uint64T] "i") in
      disk.Write ("pos" + ![uint64T] "i") "bk";;
      Continue).
Theorem Log__writeBlocks_t: ⊢ Log__writeBlocks : (struct.t Log -> slice.T disk.blockT -> uint64T -> unitT).
Proof. typecheck. Qed.
Hint Resolve Log__writeBlocks_t : types.

Definition Log__diskAppend: val :=
  rec: "Log__diskAppend" "log" :=
    lock.acquire (struct.get Log "logLock" "log");;
    let: "disklen" := Log__readHdr "log" in
    lock.acquire (struct.get Log "memLock" "log");;
    let: "memlen" := ![uint64T] (struct.get Log "memLen" "log") in
    let: "allblks" := ![slice.T (slice.T byteT)] (struct.get Log "memLog" "log") in
    let: "blks" := SliceSkip (slice.T byteT) "allblks" "disklen" in
    let: "memnxt" := ![uint64T] (struct.get Log "memTxnNxt" "log") in
    lock.release (struct.get Log "memLock" "log");;
    Log__writeBlocks "log" "blks" "disklen";;
    Log__writeHdr "log" "memlen";;
    struct.get Log "logTxnNxt" "log" <-[uint64T] "memnxt";;
    lock.release (struct.get Log "logLock" "log").
Theorem Log__diskAppend_t: ⊢ Log__diskAppend : (struct.t Log -> unitT).
Proof. typecheck. Qed.
Hint Resolve Log__diskAppend_t : types.

Definition Log__Logger: val :=
  rec: "Log__Logger" "log" :=
    Skip;;
    (for: (λ: <>, #true); (λ: <>, Skip) := λ: <>,
      Log__diskAppend "log";;
      Continue).
Theorem Log__Logger_t: ⊢ Log__Logger : (struct.t Log -> unitT).
Proof. typecheck. Qed.
Hint Resolve Log__Logger_t : types.

(* txn.go *)

Definition Txn := struct.decl [
  "log" :: struct.ptrT Log;
  "blks" :: mapT disk.blockT
].

(* XXX wait if cannot reserve space in log *)
Definition Begin: val :=
  rec: "Begin" "log" :=
    let: "txn" := struct.mk Txn [
      "log" ::= "log";
      "blks" ::= NewMap disk.blockT
    ] in
    "txn".
Theorem Begin_t: ⊢ Begin : (struct.ptrT Log -> struct.t Txn).
Proof. typecheck. Qed.
Hint Resolve Begin_t : types.

Definition Txn__Write: val :=
  rec: "Txn__Write" "txn" "addr" "blk" :=
    let: "ret" := ref_to boolT #true in
    let: (<>, "ok") := MapGet (struct.get Txn "blks" "txn") "addr" in
    (if: "ok"
    then
      MapInsert (struct.get Txn "blks" "txn") "addr" (![slice.T byteT] "blk");;
      #()
    else #());;
    (if: ~ "ok"
    then
      (if: ("addr" = LOGMAXBLK)
      then "ret" <-[boolT] #false
      else MapInsert (struct.get Txn "blks" "txn") "addr" (![slice.T byteT] "blk"));;
      #()
    else #());;
    ![boolT] "ret".
Theorem Txn__Write_t: ⊢ Txn__Write : (struct.t Txn -> uint64T -> refT disk.blockT -> boolT).
Proof. typecheck. Qed.
Hint Resolve Txn__Write_t : types.

Definition Txn__Read: val :=
  rec: "Txn__Read" "txn" "addr" :=
    let: ("v", "ok") := MapGet (struct.get Txn "blks" "txn") "addr" in
    (if: "ok"
    then "v"
    else disk.Read ("addr" + LOGEND)).
Theorem Txn__Read_t: ⊢ Txn__Read : (struct.t Txn -> uint64T -> disk.blockT).
Proof. typecheck. Qed.
Hint Resolve Txn__Read_t : types.

Definition Txn__Commit: val :=
  rec: "Txn__Commit" "txn" :=
    let: "blks" := ref (zero_val (slice.T disk.blockT)) in
    MapIter (struct.get Txn "blks" "txn") (λ: <> "v",
      "blks" <-[slice.T (slice.T byteT)] SliceAppend (slice.T byteT) (![slice.T (slice.T byteT)] "blks") "v");;
    let: "ok" := Log__Append (struct.load Log (struct.get Txn "log" "txn")) (![slice.T (slice.T byteT)] "blks") in
    "ok".
Theorem Txn__Commit_t: ⊢ Txn__Commit : (struct.t Txn -> boolT).
Proof. typecheck. Qed.
Hint Resolve Txn__Commit_t : types.

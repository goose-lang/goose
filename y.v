(* autogenerated from y *)
From Perennial.new_goose_lang Require Import prelude.

Section code.
Context `{ffi_syntax}.
Local Coercion Var' s: expr := Var s.

Definition b : go_type := uint64T.

Definition a (T:ty): val :=
  rec: "a" <> :=
    exception_do do:  #().

Definition foo: val :=
  rec: "foo" <> :=
    exception_do (let: "a" := ref_ty (mapT uint64T funcT) (zero_val (mapT uint64T funcT)) in
    let: "b" := ref_ty uint64T (zero_val uint64T) in
    let: "$a0" := #10 in
    do:  "b" <-[uint64T] "$a0";;;
    do:  (Fst (map.get (![mapT uint64T funcT] "a") (![uint64T] "b"))) #();;;
    do:  #()).

End code.
